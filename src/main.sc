require: slotfilling/slotFilling.sc
    module = sys.zb-common
  
require: text/text.sc
    module = sys.zb-common

require: common.js
    module = sys.zb-common
    
# –î–ª—è –∏–≥—Ä—ã –ù–∞–∑–æ–≤–∏ —Å—Ç–æ–ª–∏—Ü—É    
require: where/where.sc
    module = sys.zb-common

# –î–ª—è –∏–≥—Ä—ã –í–∏—Å–µ–ª–∏—Ü–∞
require: hangmanGameData.csv
    name = HangmanGameData
    var = $HangmanGameData
    


patterns:
    $Word = $entity<HangmanGameData> || converter = function ($parseTree) {
        var id = $parseTree.HangmanGameData[0].value;
        return $HangmanGameData[id].value;
        };
    $liter = (–∞|–±|–≤|–≥|–¥|–µ|—ë|–∂|–∑|–∏|–π|–∫|–ª|–º|–Ω|–æ|–ø|—Ä|—Å|—Ç|—É|—Ñ|—Ö|—Ü|—á|—à|—â|—ä|—ã|—å|—ç|—é|—è)
    $Yes = (–¥–∞|—Ö–æ—Ä–æ—à–æ|–¥–∞–≤–∞–π|–Ω–∞–ø–æ–º–Ω–∏|–ü—Ä–∏—Å—Ç—É–ø–∏–º)
    $No = (–ù–µ—Ç|–ù–µ —Ö–æ—á—É)
   

theme: /

    state: Start
        q!: $regex</start>
        intent: /–ø—Ä–∏–≤–µ—Ç
        script:
            $jsapi.startSession();
        a: –≠–π, —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å? –£—Ä–æ–∫ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–∫—É—á–Ω—ã–π‚Ä¶
        
        
    state: End
        script:
            $session.hm = null;
       

    state: No
        q: * $No *
        a: –ù—É —ë-–º–æ—ë‚Ä¶ –∂–∞–ª—å! –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ¬´–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º¬ª. –Ø —Ç—É—Ç.
        go!:/End
        
    
        
    state: Hangman
        # a: Hangman
        intent!: /–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º
        q: * $Yes *
        a: –ô–µ—Å! –©–∞ –≤—Å—ë —É—Å—Ç—Ä–æ–∏–º –∏ —Å—ã–≥—Ä–∞–µ–º –≤ ¬´–í–∏—Å–µ–ª–∏—Ü—É¬ª. –•–æ—á–µ—à—å –Ω–∞–ø–æ–º–Ω—é, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å?
        
        
        state: CatchAll || noContext=true
            # a: Hangman CatchAll
            event: noMatch || fromState = "/Hangman", onlyThisState = true
            random:
                a: –≠—ç—ç, —á—ë-—Ç–æ –Ω–µ –¥–æ–≥–Ω–∞–ª. –ù–∞–¥–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ ¬´–í–∏—Å–µ–ª–∏—Ü—É¬ª?
                a: –ü–æ–¥–æ–∂–¥–∏, –Ω–µ –ø–æ–Ω—è–ª. –¢–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å?
        
        state: Rules
            # a: Hangman Rules
            q: * $Yes *
            a: –í—Å—ë –ø—Ä–æ—Å—Ç–æ: —è –∑–∞–≥–∞–¥—ã–≤–∞—é —Å–ª–æ–≤–æ, –∞ —Ç—ã –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ (–∏–ª–∏ —Å—Ä–∞–∑—É –≤—Å—ë) –ø—ã—Ç–∞–µ—à—å—Å—è –æ—Ç–≥–∞–¥–∞—Ç—å. –ü–æ–ø–∞–ª ‚Äî –∫—Ä—É—Ç–æ, –Ω–µ –ø–æ–ø–∞–ª ‚Äî –ø–∏—à–∏ –æ—à–∏–±–∫—É –≤ –¥–Ω–µ–≤–Ω–∏–∫ üòÑ
            a: –¢–æ–ª—å–∫–æ –Ω–µ –∫–æ—Å—è—á—å, –∞ —Ç–æ –ø–æ—Å–ª–µ 6 –æ—à–∏–±–æ–∫ –∏–≥—Ä–∞ –≤—ã–ª–µ—Ç–∞–µ—Ç –≤ –æ–∫–Ω–æ üò¨
            a: –ò –µ—â—ë! –ß—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å—Å—è ‚Äî –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–ø—Ä–æ—Å–∏—Ç—å: ¬´–ö–∞–∫–∏–µ –±—É–∫–≤—ã —è —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª?¬ª. –ù—É —á—ë, –ø–æ–≥–Ω–∞–ª–∏?
            state: Yes
                # a: Hangman Rules Yes
                q: * $Yes *
                script:
                    $reactions.transition("/Hangman/Play");
                
            state: No
                # a: Hangman Rules  No
                q: * $No *
                a: –≠—ç—ç—Ö, –æ–±–∏–¥–Ω–æ —Å–ª—ã—à–∞—Ç—å. –ù–æ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∞–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ¬´–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º¬ª.
                script:
                    $reactions.transition("/End");
        
            
            
        state: Start
            # a: Hangman Start
            q: $regexp_i<(–ù–µ—Ç)>
            a: –ù—É —á—ë, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ ‚Äî —Å—Ä–∞–∑—É –≤ –±–æ–π!
            go!: /Hangman/Play
            
            
        state: Play
            # a: Hangman Play
            q!: $regexp_i<$liter|$Word>
            script:
                
                function norm(s) { return (s || '').toLowerCase().replace(/—ë/g, '–µ'); }
                function onlyLetters(s) { return (s || '').toLowerCase().replace(/—ë/g, '–µ').replace(/[^–∞-—èa-z]+/g, ''); }
                function buildMask(word, opened, letter) {
                    var mask = word.split('').map(function (ch) {
                        var displayChar = opened.indexOf(ch) >= 0 ? ch : '_';
                        if (letter && ch === letter) {
                            displayChar = displayChar.toUpperCase();
                        }
                        return displayChar;
                    }).join(' ');
                
                    return mask;
                }
                
        
                var qText = $request.query || '';
                var text = onlyLetters(qText);
                var attempts = $session.hm ? $session.hm.attempts - $session.hm.numErrors : 6; // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏
                
                
                    
                if (!$session || !$session.hm || !$session.hm.word) {
                    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞ –∏–∑ HangmanGameData
                    
                    var list = $HangmanGameData;
                    var i = Math.floor(Math.random() * (list.length || 1));
                    var rec = list[i] || {};
                    var raw = (rec.value.word).toString().trim();
                    word = norm(raw);
                    if($session.test !== undefined){word =$session.test;}
                    $session.len_word = word.length
                    if (!$session.guess) {
                        $session.guess = '–ø–∞—Ä—Ç–∞'; // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ –ø—É—Å—Ç–æ
                    }
        
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
                    $session.hm = { word: word, attempts: 6, opened: [], tried: [], numErrors: 0 };
                    $session.guess = word[0].toUpperCase() + word.substr(1);
                    
                    $session.numErrors = 0;
                    
                    // –ú–∞—Å–∫–∞ —Å–ª–æ–≤–∞
                    var mask = word.split('').map(function () { return '_'; }).join(' ');
                    if (Math.random() > 0.5) {
                        $temp.answer = '–°–ª–æ–≤–æ —É–∂–µ –≤ –≥–æ–ª–æ–≤–µ! –í–æ—Ç, —Å–º–æ—Ç—Ä–∏: \n' + mask + '\n(' + $session.guess + ')';}
                    else {
                        $temp.answer = '–ó–∞–≥–∞–¥–∞–ª! –°–º–æ—Ç—Ä–∏, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç: \n' + mask + '\n(' + $session.guess + ')';}
                    
                    $reactions.answer($temp.answer);
                    $reactions.answer('–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å, –¥—Ä—É–∂–∏—â–µ! –ö–∏–¥–∞–π –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º.')
                    return;
                    
                } 
                else {
                    
                    var sayStop = ['—Ö–≤–∞—Ç–∏—Ç', '–Ω–∞–¥–æ–µ–ª–æ', '—Å—Ç–æ–ø', '—Å–¥–∞—é—Å—å'];
                    if (sayStop.indexOf(text.trim().toLowerCase()) !== -1) {
                        $reactions.answer('–≠—Ö, –∂–∞–ª—å! –ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º".');
                        $session.hm = null;
                        $reactions.transition("/End");
                        return;
                    }
                    
                     
                    if(text === '–∫–∞–∫–∏–µ–±—É–∫–≤—ã—è—É–∂–µ–ø—Ä–æ–±–æ–≤–∞–ª'){
                        var triedLetters = $session.hm.tried.join(', ');
                        $reactions.answer('–£–∂–µ –±—ã–ª–∏ —Ç–∞–∫–∏–µ –±—É–∫–≤—ã: ' + triedLetters);
                    }
                    
        
                    // –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (!text) {
                        $temp.answer = '–ê? –ù–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª! –ù–∞–∑–æ–≤–∏ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è.';// -----------------------------------------------------------------
                        $reactions.answer($temp.answer);
                        return;
                    }
                    if (text === '–ø–æ–¥—Å–∫–∞–∑–∫–∞') {
                        var word = $session.guess;
                        var opened = $session.hm.opened;
                        var hintLetter = null;
                    
                        for (var i = 0; i < word.length; i++) {
                            var ch = word[i];
                            if (opened.indexOf(ch) < 0) {
                                hintLetter = ch;
                                break;
                            }
                        }
                    
                        if (hintLetter) {
                            $session.hm.opened.push(hintLetter);
                            $session.hm.tried.push(hintLetter);
                            $session.numErrors += 1; // –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å—Ç–æ–∏—Ç –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É
                    
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
                            var openedObj = {};
                            $session.hm.opened.forEach(function(ch) { openedObj[ch] = true; });
                    
                            var isWin = true;
                            word.split('').forEach(function(ch) {
                                if (!openedObj[ch]) isWin = false;
                            });
                    
                            if (isWin) {
                                $reactions.answer('–õ–æ–≤–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É! –≠—Ç–∞ –±—É–∫–≤–∞ –±—ã–ª–∞: "' + hintLetter + '".');
                                $reactions.answer('–í–∞—É! –¢—ã –≤—Å—ë —Å–ª–æ–≤–æ —É–≥–∞–¥–∞–ª! –≠—Ç–æ –æ–Ω–æ: ' + word + ' üéâ');
                                 $reactions.transition("/End");
                                $session.hm = null;
                            } else {
                                var mask = buildMask(word, $session.hm.opened, hintLetter);
                                $reactions.answer('–õ–æ–≤–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É! –Ø —Ä–∞—Å–∫—Ä—ã–ª —Ç–µ–±–µ –±—É–∫–≤—É: "' + hintLetter.toUpperCase() + '".');
                                $reactions.answer(mask + '\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ' + (6 - $session.numErrors));
                            }
                        } else {
                            $reactions.answer('–ë–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å ‚Äî –≤—Å–µ –±—É–∫–≤—ã –∏ —Ç–∞–∫ —É–∂–µ –Ω–∞ —Å—Ç–æ–ª–µ ü§∑');
                        }
                        return;
                    }
                    if ($request.query.length == 1 || $request.query.length == $session.len_word){
                        
                        if (text.length > 1) {                           // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–ª–æ–≤–æ
                            if (text !== $session.guess.toLowerCase()) {
                                $session.numErrors == 6;
                                $temp.answer = '–≠—ç—ç‚Ä¶ –Ω—É —Ç—ã –±–∞–ª–±–µ—Å! –≠—Ç–æ –≤–æ–æ–±—â–µ –Ω–µ —Ç–æ.';
                                $reactions.answer($temp.answer);
                                $temp.answer = '–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ: ' + $session.guess;
                                $reactions.answer($temp.answer);
                                $reactions.answer('–•–æ—á–µ—à—å –µ—â—ë —Ä–∞—É–Ω–¥? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º"!');
                                $session.hm = null;
                                $reactions.transition("/End");
                            } 
                            else {
                                $reactions.answer('–ï–µ–µ–µ–º–∞–∞, –ª–µ–≥–µ–Ω–¥–∞! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è üéâ!');
                                $reactions.answer($session.guess);
                                $reactions.answer('–•–æ—á–µ—à—å –µ—â—ë —Ä–∞—É–Ω–¥? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º"!');
                                $session.hm = null; // –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
                                $reactions.transition("/End");
                                
                            }
                        } 
                        else {
                            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –±—É–∫–≤—É
                            var letter = text[0];
            
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã
                            if ($session.hm.tried.indexOf(letter) >= 0) {
                                $reactions.answer('–≠–π, —Ç—ã –∂–µ —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª  –±—É–∫–≤—É ¬´' + letter + '¬ª ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è üòÖ.');
                                $reactions.answer(buildMask($session.guess.toLowerCase(), $session.hm.opened));
                                return;
                            }
            
                            // –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–æ–≤–∞–Ω–Ω—ã—Ö
                            $session.hm.tried.push(letter);
            
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –±—É–∫–≤–∞ –≤ —Å–ª–æ–≤–µ
                            if ($session.guess.toLowerCase().indexOf(letter) >= 0) {
                                
                                $session.hm.opened.push(letter);
                                
                                
                                var openedObj = {};
                                var uniqueLettersInWord = $session.guess.toLowerCase().split('');
                            
                                // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏–∑ opened
                                $session.hm.opened.forEach(function(ch) {
                                    openedObj[ch] = true;
                                });
                                
                                var isWin = true;
                                uniqueLettersInWord.forEach(function(ch) {
                                    if (!openedObj[ch]) {
                                        isWin = false;
                                    }
                                });
                                
                                
                                if (isWin) {
                                    $reactions.answer('–ù—É —ç—Ç–æ –±—ã–ª–æ –º–æ—â–Ω–æ! –°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é ‚úåÔ∏è');
                                    $reactions.answer($session.guess);
                                    $reactions.answer('–•–æ—á–µ—à—å –µ—â—ë —Ä–∞—É–Ω–¥? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º"!');
                                     $session.hm = null; 
                                    $reactions.transition("/End");
                                } 
                                
                                else $reactions.answer(buildMask($session.guess.toLowerCase(), $session.hm.opened, letter));
                                                            
                                
                                
                            } 
                            
                            
                            else {
                                $session.numErrors += 1;
                                if ($session.numErrors !== 6) {
                                    $reactions.answer('–ê –≤–æ—Ç —ç—Ç–æ–π –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ —Ç–æ—á–Ω–æ –Ω–µ—Ç üò¨');
                                    $reactions.answer('–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ' + (6 - $session.numErrors) + '.');
                                    $reactions.answer(buildMask($session.guess.toLowerCase(), $session.hm.opened));
                                }
                                else{
                                    $reactions.answer('–≠—Ö, –Ω–µ –ø–æ–≤–µ–∑–ª–æ... –Ø –∑–∞–≥–∞–¥—ã–≤–∞–ª: "' + $session.guess + '".');
                                    $reactions.answer('–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–∑—è—Ç—å —Ä–µ–≤–∞–Ω—à ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ¬´–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º¬ª.');
                                    $session.hm = null; // –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
                                    $reactions.transition("/End");
                                    return;
                                }
                            }
                            if ($session.hm !== null)
                            {
                                var sayRandom = ['–ù—É —á—Ç–æ, —Ç–≤–æ–π —Ö–æ–¥! –ü—É–ª—è–π –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ.', '–ß—Ç–æ –¥–∞–ª—å—à–µ? –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–∏–Ω–µ–º –≤ –±–æ–π?', '–î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º... –∫–∞–∫—É—é –±—É–∫–≤—É –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–ø–µ—Ä—å?	'];
                                var randomIndex = Math.floor(Math.random() * 3);
                                $reactions.answer(sayRandom[randomIndex]);
                            }
                        }
                    }
                }
                
                
            
            state: CatchAll || noContext=true
            # a: Hangman Play CatchAll
            event: noMatch || fromState = "/Hangman/Play", onlyThisState = true
            script:
                function onlyLetters(s) { return (s || '').toLowerCase().replace(/—ë/g, '–µ').replace(/[^–∞-—èa-z]+/g, ''); }
                var query = $request.query.trim().toLowerCase();
                var list = ['–¥–∞', '–Ω–µ—Ç', '—Ö–æ—Ä–æ—à–æ', '–Ω–∞–ø–æ–º–Ω–∏','–¥–∞–≤–∞–π','–Ω–µ—Ö–æ—á—É','–ø—Ä–∏—Å—Ç—É–ø–∏–º', '–ø–æ–¥—Å–∫–∞–∑–∫–∞', '–∫–∞–∫–∏–µ–±—É–∫–≤—ã—è—É–∂–µ–ø—Ä–æ–±–æ–≤–∞–ª']
                if(query.length == 1 || query.length == $session.len_word ||list.indexOf(onlyLetters(query)) !== -1){return;}
                else{
                    if (Math.random() > 0.5) {
                        $reactions.answer('–°–ª—É—à–∞–π, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª‚Ä¶ –°–∫–∞–∂–∏ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ, –∞?');
                    }
                    else {
                        $reactions.answer('–≠—ç—ç–º‚Ä¶ –Ω–µ —É–ª–∞–≤–ª–∏–≤–∞—é. –ù–∞–∑–æ–≤–∏ –±—É–∫–≤—É –∏–ª–∏ –≤—Å—ë —Å–ª–æ–≤–æ.');
                    }
                    
                }
                
        

    state: NoMatch || noContext=true
        event!: noMatch
        script:
            if ($session && $session.hm && $session.hm.word) {
                $reactions.transition('/Hangman/Play');
                return;
            }
        random:
            a: –≠–π, –ø–æ–≤—Ç–æ—Ä–∏ –ø–ª–∏–∑ ‚Äî —è —Å–±–∏–ª—Å—è üòÖ
            a: –≠—Ç–æ —á—Ç–æ –±—ã–ª–æ? üòÑ
            a: –£–ø—Å, –Ω–µ –¥–æ–≥–Ω–∞–ª. –ü–æ–≤—Ç–æ—Ä–∏?
       

    # state: reset
    #     q!: reset
    #     script:
    #         $session = {};
    #         $client = {};
    #     go!: /Start
